###Exercício 1

a) Ele devolve o resultado da query e outras informações


b)

```
async function searchActor(name: string): Promise<any>{
  try {
    const result = await connection
      .select("*")
      .from("Actor")
      .where("name", "like", `%${name}%`)
      console.log(result)
      return result
  } catch (error) {
      console.log(error)
  }
}
```

c) 
```
async function countActor(gender: string): Promise<any>{
  try {
    const result = await connection.raw(`
      select count(*) as count from Actor
      where gender = "${gender}"
    `)
    console.log(result[0][0])
    return result[0][0]
  } catch (error) {
      console.log(error)
  }
}

countActor("female")
```

###Exercício 2

a)
```
const updateSalaryActor = async(salary: number, id: string): Promise<void> => {
  await connection
  .where({id: `${id}`})
  .update ({salary: `${salary}`})
  .table("Actor")
}

updateSalaryActor(500000, "001")
```

b)
```
const deleteActor = async(id: string): Promise<void> => {
  await connection
  .where({id: `${id}`})
  .delete()
  .table("Actor")
}

deleteActor("007")
```

c)
```
const averageActor = async(gender: string): Promise<any> => {
  const result = await connection
  .where({gender: `${gender}`})
  .avg("salary as average")
  .table("Actor")

  console.log(result[0].average)
  return result[0].average
}

averageActor("male")
```

###Exercício 3

a) Pois ele irá pegar o id que será passado na chave id.

b) Do try traz a resposta de sucesso, e do catch traz a resposta de um erro.

c)
```
app.get("/actor", async (req: Request, res: Response) => {
  try {
    
    const count = await countActor(req.query.gender as string);

    res.status(200).send(count)
  } catch (err) {
    res.status(400).send({
      message: err.message,
    });
  }
});
```

###Exercício 4

a)
```
app.post("actor", async(req: Request, res: Response) => {
  try {
    await updateSalaryActor(req.body.salary, req.body.id)
    res.status(200).send()
  } catch (error) {
    res.status(400).send({
      message: error.message,
    });
  }
})
```

b)
```
app.delete("/actor/:id", async(req: Request, res: Response) => {
  try {
    await deleteActor(req.params.id)
    res.status(200).end()
  } catch (error) {
    res.status(400).send({
      message: error.message
    });
  }
})
```

###Exercício 5

```
const createMovie = async(id: string, name: string, synopsis: string, release_date: Date, evaluation: number): Promise<void> => {
  await connection
  .insert({
    id,
    name,
    synopsis,
    release_date,
    evaluation
  })
  .into("movie")
}

app.post("/movie", async(req: Request, res: Response) => {
  try {
    await createMovie(
      req.body.id,
      req.body.name,
      req.body.synopsis,
      req.body.release_date,
      req.body.evaluation
    )
    res.status(200).send()
  } catch (error) {
    res.status(400).send({message: error.message})
  }
})
```

###Exercício 6

```
const getAllMovie = async(): Promise<any> => {
  const result = await connection
  .select("*")
  .from("movie")
  .limit(15)

  return result
}

app.get("/movie/all", async(req: Request, res: Response) => {
  try {
    const result = await getAllMovie()

    res.status(200).send(result)
  } catch (error) {
    res.status(400).send({message: error.message})
  }
})
```

###Exercício 7

```
const searchMovie = async (search: string): Promise<any> => {
    const result = await connection
      .select("*")
      .from("movie")
      .where("name", "like", `%${search}%`)
      .orWhere("synopsis", "like", `%${search}%`)
      return result
}

app.get("/movie/search", async(req: Request, res: Response) => {
  try {
    const result = await searchMovie(req.query.search as string)
  
    res.status(200).send(result)
    
  } catch (error) {
    res.status(400).send({message: error.message})
  }
})
```